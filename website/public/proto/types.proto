syntax = "proto3";

package COD.Types;

message Vector
{
	float x = 1;
	float y = 2;
	float z = 3;
}

message Vector2
{
	float x = 1;
	float y = 2;
}

message Quaternion
{
	float x = 1;
	float y = 2;
	float z = 3;
	float w = 4;
}

message Color
{
	float r = 1;
	float g = 2;
	float b = 3;
	float a = 4;
}

message AmbienceSettings
{
	Color skyZenithColor = 1;
	Color skyHorizonColor = 2;

	float sunAltitude = 3;
	float sunAzimuth = 4;
	float sunSize = 5;

	float fogDensity = 6;
}

enum LevelNodeShape
{
	START = 0;
	FINISH = 1;
	SIGN = 2;
	GRAVITY = 3;
	LOBBYTERMINAL = 4;
	PARTICLE_EMITTER = 5;

	__END_OF_SPECIAL_PARTS__ = 6;

	CUBE = 1000;
	SPHERE = 1001;
	CYLINDER = 1002;
	PYRAMID = 1003;
	PRISM = 1004;
	CONE = 1005;
}

enum LevelNodeMaterial
{
	DEFAULT = 0;
	GRABBABLE = 1;
	ICE = 2;
	LAVA = 3;
	WOOD = 4;
	GRAPPLABLE = 5;
	GRAPPLABLE_LAVA = 6;

	GRABBABLE_CRUMBLING = 7;
	DEFAULT_COLORED = 8;
	BOUNCING = 9;
	SNOW = 10;

	TRIGGER = 11; //Not actually written into files and the number on this could be changed without issues. Only used as enum value internally.
}

message LevelNodeGroup
{
	Vector position = 1;
	Vector scale = 2;
	Quaternion rotation = 3;

	//This is where level nodes that are part of the group are stored when saving to file / loading
	//It is ok to be empty when networking a groups transform
	//There is an additional message for networking grouping and ungrouping (LevelNodeGroupRequest, LevelNodeGroupResponse)
	//When sending the full level on a new player joining the editor, first the level nodes are sent on their own and then a group response to group them
	repeated LevelNode childNodes = 4;
}

message LevelNodeStart
{
	Vector position = 1;
	Quaternion rotation = 2; //Should always be upright and is meant to be used for the player rotation on spawn
	float radius = 3;
	string name = 4;
}

message LevelNodeFinish
{
	Vector position = 1;
	float radius = 2;
}

message LevelNodeStatic
{
	LevelNodeShape shape = 1; //Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
	LevelNodeMaterial material = 2; //Can not be GRABBABLE_CRUMBLING

	Vector position = 3;
	Vector scale = 4;
	Quaternion rotation = 5;

	Color color1 = 6;
	Color color2 = 9; //Used for colored lava blocks, blending between the two colors, but also used for specularity on colored default blocks!

	bool isNeon = 7;
	bool isTransparent = 8;
}

message LevelNodeCrumbling
{
	LevelNodeShape shape = 1; //Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
	LevelNodeMaterial material = 2; //Must be GRABBABLE_CRUMBLING

	Vector position = 3;
	Vector scale = 4;
	Quaternion rotation = 5;

	float stableTime = 6;
	float respawnTime = 7;
}

message LevelNodeSign
{
	Vector position = 1;
	Quaternion rotation = 2;

	string text = 3;
}

message LevelNodeGravity
{
	enum Mode
	{
		DEFAULT = 0;
		NOLEGS = 1; //gtag like movement with the head on the ground, also no leg collisions with lava
	}

	Mode mode = 1;

	Vector position = 2;
	Vector scale = 3;
	Quaternion rotation = 4;

	Vector direction = 5;
}

message LevelNodeLobbyTerminal
{
	Vector position = 2;
	Quaternion rotation = 4;
}

message LevelNodeParticleEmitter
{
	Vector position = 1;
	Vector scale = 2;
	Quaternion rotation = 3;

	uint32 particlesPerSecond = 5;

	Vector2 lifeSpan = 6;
	Color startColor = 7;
	Color endColor = 8;
	Vector2 startSize = 9;
	Vector2 endSize = 10;
	
	Vector velocity = 14;
	Vector velocityMin = 15;
	Vector velocityMax = 16;
	Vector accelerationMin = 17;
	Vector accelerationMax = 18;
}

message TriggerSourceBasic
{
	enum Type
	{
		HAND = 0;
		HEAD = 1;
		GRAPPLE = 2;
		FEET = 3;
		BLOCK = 4;
	}

	Type type = 1;
}

message TriggerSource
{
	oneof content
	{
		TriggerSourceBasic triggerSourceBasic = 1;
	}
}

message TriggerTargetAnimation
{
	enum Mode
	{
		STOP = 0;
		START = 1;
		TOGGLE = 2; //Toggles between start and stop
		TOGGLE_REVERSE = 3; //Toggles between playing the animation forwards and backwards
		RESTART = 4; //Like start, but will always play from the beginning (or end if reverse is on)
		RESET = 5; //Reset to the initial state, playing looped default animation if there is one
	}

	uint64 objectID = 1;
	string animationName = 2;
	
	bool loop = 3; //Make the animation repeat endlessly until it is stopped
	bool reverse = 4; //Make the animation play backwards

	Mode mode = 10;
}

message TriggerTargetSubLevel
{
	string levelIdentifier = 1;
	string spawnPoint = 2;
}

message TriggerTarget
{
	oneof content
	{
		TriggerTargetAnimation triggerTargetAnimation = 1;
		TriggerTargetSubLevel triggerTargetSubLevel = 2;
	}
}

message LevelNodeTrigger
{
	LevelNodeShape shape = 1; //Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM

	Vector position = 2;
	Vector scale = 3;
	Quaternion rotation = 4;

	bool isShared = 5;

	repeated TriggerSource triggerSources = 6;
	repeated TriggerTarget triggerTargets = 7;
}

message AnimationFrame
{
	float time = 1;
	Vector position = 2;
	Quaternion rotation = 3;
}

message Animation
{
	enum Direction
	{
		RESTART = 0; //After the last frame, jump back to the first frame
		PINGPONG = 1; //After the last frame, play the animation backwards
	}

	string name = 1;
	repeated AnimationFrame frames = 2;
	Direction direction = 3;
	float speed = 4;
}

message LevelNode
{
	bool isLocked = 6;

	oneof content
	{
		LevelNodeStart levelNodeStart = 1;
		LevelNodeFinish levelNodeFinish = 2;
		LevelNodeStatic levelNodeStatic = 3;
		LevelNodeSign levelNodeSign = 4;
		LevelNodeCrumbling levelNodeCrumbling = 5;
		LevelNodeGroup levelNodeGroup = 7;
		LevelNodeGravity levelNodeGravity = 8;
		LevelNodeLobbyTerminal levelNodeLobbyTerminal = 9;
		LevelNodeTrigger levelNodeTrigger = 10;
		LevelNodeParticleEmitter levelNodeParticleEmitter = 11;
	}

	repeated Animation animations = 15; //A level node can have any number (might limit it in the UI) of named animations
	int32 activeAnimation = 16; //Index into animations, -1 if it is not playing an animation at the start, ignored if there are no animations (so will default to 0 in that case)
}
